name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.22'

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: make deps
    
    - name: Run tests
      run: make test-all
    
    - name: Build services
      run: make build-all
    
    - name: Build Docker images
      run: make docker-build-all

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: golangci-lint (fr0g-ai-aip)
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: fr0g-ai-aip
    
    - name: golangci-lint (fr0g-ai-bridge)
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: fr0g-ai-bridge

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, security, lint]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push fr0g-ai-aip
      uses: docker/build-push-action@v5
      with:
        context: ./fr0g-ai-aip
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/fr0g-ai-aip:latest
          ghcr.io/${{ github.repository }}/fr0g-ai-aip:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push fr0g-ai-bridge
      uses: docker/build-push-action@v5
      with:
        context: ./fr0g-ai-bridge
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/fr0g-ai-bridge:latest
          ghcr.io/${{ github.repository }}/fr0g-ai-bridge:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
