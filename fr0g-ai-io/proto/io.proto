syntax = "proto3";

package fr0g.ai.io;

option go_package = "github.com/fr0g-vibe/fr0g-ai/fr0g-ai-io/internal/pb";

import "google/protobuf/timestamp.proto";

// InputEvent represents an incoming event from external sources
message InputEvent {
  string id = 1;
  string type = 2; // "sms", "voice", "irc", "discord", "email"
  string source = 3;
  string content = 4;
  map<string, string> metadata = 5;
  google.protobuf.Timestamp timestamp = 6;
  int32 priority = 7;
}

// InputEventResponse represents the response after processing an input event
message InputEventResponse {
  string event_id = 1;
  bool processed = 2;
  repeated OutputCommand actions = 3;
  map<string, string> metadata = 4;
  google.protobuf.Timestamp processed_at = 5;
}

// OutputCommand represents a command to send output via I/O channels
message OutputCommand {
  string id = 1;
  string type = 2; // "sms", "voice", "irc", "discord", "email"
  string target = 3;
  string content = 4;
  map<string, string> metadata = 5;
  int32 priority = 6;
  google.protobuf.Timestamp created_at = 7;
}

// OutputResult represents the result of executing an output command
message OutputResult {
  string command_id = 1;
  bool success = 2;
  string error_message = 3;
  map<string, string> metadata = 4;
  google.protobuf.Timestamp completed_at = 5;
}

// AnalysisResult represents analysis results from master-control
message AnalysisResult {
  string event_id = 1;
  string analysis_type = 2;
  map<string, string> results = 3;
  repeated OutputCommand recommended_actions = 4;
  google.protobuf.Timestamp analyzed_at = 5;
}

// Health check messages
message HealthCheckRequest {}

message HealthCheckResponse {
  string status = 1;
  string version = 2;
  map<string, string> details = 3;
}

// I/O Service definition
service IOService {
  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  
  // Process input events
  rpc ProcessInputEvent(InputEvent) returns (InputEventResponse);
  
  // Execute output commands
  rpc ExecuteOutputCommand(OutputCommand) returns (OutputResult);
  
  // Stream input events to master-control
  rpc StreamInputEvents(stream InputEvent) returns (stream AnalysisResult);
  
  // Stream output commands from master-control
  rpc StreamOutputCommands(stream OutputCommand) returns (stream OutputResult);
}
