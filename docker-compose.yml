services:
  # Redis for Registry Persistence
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fr0g-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes

  # Service Discovery Registry
  service-registry:
    build:
      context: .
      dockerfile: fr0g-ai-registry/Dockerfile
    ports:
      - "8500:8500"
    environment:
      - REGISTRY_PORT=8500
      - REGISTRY_HOST=0.0.0.0
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
    networks:
      - fr0g-ai-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/health"]
      interval: 30s
      timeout: 10s
      retries: 3


  # AI Identity & Persona Service
  fr0g-ai-aip:
    build:
      context: .
      dockerfile: fr0g-ai-aip/Dockerfile
    ports:
      - "8080:8080"
      - "9090:9090"
    environment:
      - REGISTRY_URL=http://service-registry:8500
      - SERVICE_NAME=fr0g-ai-aip
      - SERVICE_ID=aip-001
      - HTTP_PORT=8080
      - GRPC_PORT=9090
      - STORAGE_TYPE=file
      - FR0G_STORAGE_TYPE=file
      - FR0G_DATA_DIR=/app/data
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - GRPC_ENABLE_REFLECTION=${GRPC_ENABLE_REFLECTION:-false}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    volumes:
      - aip_data:/app/data
      - ./logs:/app/logs
    depends_on:
      service-registry:
        condition: service_healthy
    networks:
      - fr0g-ai-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health && nc -z localhost 9090"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # AI Bridge Service
  fr0g-ai-bridge:
    build:
      context: .
      dockerfile: fr0g-ai-bridge/Dockerfile
    ports:
      - "8082:8082"
      - "9091:9091"
    environment:
      - REGISTRY_URL=http://service-registry:8500
      - SERVICE_NAME=fr0g-ai-bridge
      - SERVICE_ID=bridge-001
      - HTTP_PORT=8082
      - GRPC_PORT=9091
      - OPENWEBUI_BASE_URL=${OPENWEBUI_BASE_URL:-http://openwebui:3000}
      - OPENWEBUI_API_KEY=${OPENWEBUI_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - AIP_GRPC_ENDPOINT=fr0g-ai-aip:9090
    volumes:
      - bridge_config:/app/config
      - ./logs:/app/logs
    depends_on:
      service-registry:
        condition: service_healthy
      fr0g-ai-aip:
        condition: service_healthy
    networks:
      - fr0g-ai-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/health && nc -z localhost 9091"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # AI Master Control (Cognitive Engine)
  fr0g-ai-master-control:
    build:
      context: .
      dockerfile: fr0g-ai-master-control/Dockerfile
    ports:
      - "8081:8081"
    environment:
      - REGISTRY_URL=http://service-registry:8500
      - SERVICE_NAME=fr0g-ai-master-control
      - SERVICE_ID=mcp-001
      - HTTP_PORT=8081
      - HTTP_HOST=0.0.0.0
      - STORAGE_TYPE=file
      - DATA_DIR=/app/data
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MCP_LEARNING_ENABLED=${MCP_LEARNING_ENABLED:-true}
      - MCP_SYSTEM_CONSCIOUSNESS=${MCP_SYSTEM_CONSCIOUSNESS:-true}
      - MCP_EMERGENT_CAPABILITIES=${MCP_EMERGENT_CAPABILITIES:-true}
      - MCP_MAX_CONCURRENT_WORKFLOWS=${MCP_MAX_CONCURRENT_WORKFLOWS:-10}
    volumes:
      - mcp_data:/app/data
      - ./logs:/app/logs
    depends_on:
      service-registry:
        condition: service_healthy
    networks:
      - fr0g-ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # AI Input/Output Processing Service
  fr0g-ai-io:
    build:
      context: .
      dockerfile: fr0g-ai-io/Dockerfile
    ports:
      - "8083:8083"
      - "9092:9092"
    environment:
      - REGISTRY_URL=http://service-registry:8500
      - SERVICE_NAME=fr0g-ai-io
      - SERVICE_ID=io-001
      - HTTP_PORT=8083
      - GRPC_PORT=9092
      - MCP_GRPC_ENDPOINT=fr0g-ai-master-control:8081
      - LOG_LEVEL=${LOG_LEVEL:-info}
      # SMS Configuration
      - SMS_ENABLED=${SMS_ENABLED:-true}
      - SMS_PROVIDER=${SMS_PROVIDER:-google_voice}
      - SMS_API_KEY=${SMS_API_KEY}
      - SMS_API_SECRET=${SMS_API_SECRET}
      # Voice Configuration
      - VOICE_ENABLED=${VOICE_ENABLED:-true}
      - VOICE_PROVIDER=${VOICE_PROVIDER:-google_voice}
      - VOICE_API_KEY=${VOICE_API_KEY}
      - VOICE_API_SECRET=${VOICE_API_SECRET}
      # IRC Configuration
      - IRC_ENABLED=${IRC_ENABLED:-true}
      - IRC_SERVER=${IRC_SERVER:-irc.libera.chat}
      - IRC_PORT=${IRC_PORT:-6697}
      - IRC_USE_SSL=${IRC_USE_SSL:-true}
      # ESMTP Configuration
      - ESMTP_ENABLED=${ESMTP_ENABLED:-true}
      - ESMTP_PORT=${ESMTP_PORT:-2525}
      - ESMTP_HOST=${ESMTP_HOST:-0.0.0.0}
      # Discord Configuration
      - DISCORD_ENABLED=${DISCORD_ENABLED:-true}
    volumes:
      - io_data:/app/data
      - ./logs:/app/logs
    depends_on:
      service-registry:
        condition: service_healthy
      fr0g-ai-master-control:
        condition: service_healthy
    networks:
      - fr0g-ai-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/health && nc -z localhost 9092"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 45s
    restart: unless-stopped

  # Optional: Add OpenWebUI for complete AI chat interface
  # Uncomment to enable full AI chat capabilities
  # openwebui:
  #   image: ghcr.io/open-webui/open-webui:main
  #   container_name: fr0g-ai-openwebui
  #   ports:
  #     - "3000:8080"
  #   environment:
  #     - OLLAMA_BASE_URL=http://ollama:11434
  #     - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY:-your-secret-key}
  #   volumes:
  #     - openwebui_data:/app/backend/data
  #   restart: unless-stopped
  #   networks:
  #     - fr0g-ai-network

networks:
  fr0g-ai-network:
    driver: bridge

volumes:
  aip_data:
    driver: local
  bridge_config:
    driver: local
  mcp_data:
    driver: local
  io_data:
    driver: local
  openwebui_data:
    driver: local
  registry-data:
    driver: local
  redis_data:
    driver: local
